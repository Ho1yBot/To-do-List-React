import React, { useState } from 'react';

const Task = ({ task, editTask, deleteTask, toggleStatus }) => {
    const [isEditing, setIsEditing] = useState(false);
    const [title, setTitle] = useState(task.title);
    const [description, setDescription] = useState(task.description);
    const [dueDate, setDueDate] = useState(task.dueDate);
    const [status, setStatus] = useState(task.status || 'in-progress');

    const handleEdit = () => {
        if (isEditing) {
            const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;
            if (title && dueDate && dateRegex.test(dueDate)) {
                editTask(task.id, title, description, dueDate, status);
            } else {
                alert('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥.');
                return;
            }
        }
        setIsEditing(!isEditing);
    };

    const handleToggleStatus = () => {
        const newStatus = status === 'in-progress' ? 'completed' : 'in-progress';
        toggleStatus(task.id, newStatus);
        setStatus(newStatus);
    };

    return (
        <div className="task">
            {isEditing ? (
                <>
                    <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} />
                    <input type="text" value={description} onChange={(e) => setDescription(e.target.value)} />
                    <input type="text" value={dueDate} onChange={(e) => setDueDate(e.target.value)} />
                    {/* <select value={status} onChange={(e) => setStatus(e.target.value)}>
                        <option value="in-progress">–í —Ä–∞–±–æ—Ç–µ</option>
                        <option value="completed">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</option>
                    </select> */}
                </>
            ) : (
                <>
                    <h3>{task.title}</h3>
                    <p>{task.description}</p>
                    <p>{task.dueDate}</p>
                    <p>{task.status === 'completed' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ' : '–í —Ä–∞–±–æ—Ç–µ üõ†Ô∏è'}</p>
                </>
            )}
            <button onClick={handleToggleStatus}>{status === 'completed' ? '–í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É' : '–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º'}</button>
            <button onClick={handleEdit}>{isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}</button>
            <button onClick={() => deleteTask(task.id)}>–£–¥–∞–ª–∏—Ç—å</button>
            {isEditing && <button onClick={() => setIsEditing(false)}>–û—Ç–º–µ–Ω–∞</button>}
        </div>
    );
};

export default Task;
